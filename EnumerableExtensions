namespace Common
{
    using System;
    using System.Threading;
    using System.Collections.Generic;
    using System.Linq;

    public static class EnumerableExtensions
    {
        public static bool IsNullOrEmpty<T>(this IEnumerable<T> enumerable) => !enumerable?.Any() ?? true;

        public static T PickRandom<T>(this IEnumerable<T> enumerable)
        {
            Guard.Argument(() => !enumerable.IsNullOrEmpty(), nameof(enumerable));

            var list = enumerable.ToList();
            return list[StaticRandom.Rand() % list.Count];
        }
    }
    
    public static class StaticRandom
    {
        private static int _seed = Environment.TickCount;

        private static readonly ThreadLocal<Random> Random = new ThreadLocal<Random>(() => new Random(Interlocked.Increment(ref _seed)));

        public static int Rand()
        {
            return Random.Value.Next();
        }
    }
}
